
import { useState } from "react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  TrendingUp, 
  LineChart, 
  BarChart, 
  AlertCircle, 
  Target, 
  ShoppingBag, 
  Brain, 
  Sparkles,
  RefreshCw
} from "lucide-react";
import { useFileAnalysis } from "@/contexts/FileAnalysisContext";
import { useToast } from "@/components/ui/use-toast";

export function CompetitorAiInsights() {
  const { items, enrichDataWithMarketInfo } = useFileAnalysis();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("pricing");
  const [isLoading, setIsLoading] = useState(false);
  const [insights, setInsights] = useState<{
    pricing: {
      pricePositioning: { status: 'higher' | 'lower' | 'competitive'; confidence: number };
      recommendations: string[];
      opportunityScore: number;
    };
    trends: {
      direction: 'up' | 'down' | 'stable';
      percentageChange: number;
      forecast: 'increase' | 'decrease' | 'stable';
      categories: { name: string; trend: 'up' | 'down' | 'stable'; percentage: number }[];
    };
    strategy: {
      recommendations: string[];
      competitiveAdvantages: string[];
      pricingSensitivity: 'high' | 'medium' | 'low';
    };
  } | null>(null);
  
  const generateAiInsights = async () => {
    if (items.length === 0) {
      toast({
        title: "No data available",
        description: "Please upload a price list first.",
        variant: "destructive",
      });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // First enrich data with market info if not already done
      const hasMarketData = items.some(item => item.marketData !== undefined);
      
      if (!hasMarketData) {
        await enrichDataWithMarketInfo();
      }
      
      // Simulate AI analysis with mock data
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Mock insights - in a real implementation, this would be generated by an AI model
      const mockInsights = {
        pricing: {
          pricePositioning: { 
            status: ['higher', 'lower', 'competitive'][Math.floor(Math.random() * 3)] as 'higher' | 'lower' | 'competitive', 
            confidence: Math.round(Math.random() * 30 + 70) 
          },
          recommendations: [
            "Increase prices on premium products by 5-7% where market position is strong",
            "Maintain price parity on key value items to remain competitive",
            "Consider price reductions on slow-moving inventory",
            "Implement dynamic pricing for high-demand, low-competition items"
          ],
          opportunityScore: Math.round(Math.random() * 40 + 60)
        },
        trends: {
          direction: ['up', 'down', 'stable'][Math.floor(Math.random() * 3)] as 'up' | 'down' | 'stable',
          percentageChange: +(Math.random() * 8 + 1).toFixed(1),
          forecast: ['increase', 'decrease', 'stable'][Math.floor(Math.random() * 3)] as 'increase' | 'decrease' | 'stable',
          categories: [
            { name: "Skincare", trend: "up", percentage: +(Math.random() * 12 + 2).toFixed(1) },
            { name: "Haircare", trend: "stable", percentage: +(Math.random() * 2).toFixed(1) },
            { name: "Makeup", trend: "down", percentage: +(Math.random() * 5 + 1).toFixed(1) },
            { name: "Fragrance", trend: "up", percentage: +(Math.random() * 8 + 4).toFixed(1) }
          ]
        },
        strategy: {
          recommendations: [
            "Focus on premium positioning for luxury skincare lines",
            "Maintain competitive pricing in fragrances to capture market share",
            "Consider bundle pricing strategies for complementary products",
            "Implement limited-time promotions for high-margin items"
          ],
          competitiveAdvantages: [
            "Unique product assortment compared to main competitors",
            "More competitive pricing in premium haircare",
            "Better value proposition in gift sets",
            "Faster adoption of trending ingredients in skincare"
          ],
          pricingSensitivity: ['high', 'medium', 'low'][Math.floor(Math.random() * 3)] as 'high' | 'medium' | 'low'
        }
      };
      
      setInsights(mockInsights);
      
      toast({
        title: "AI insights generated",
        description: "Competitive pricing insights are now available.",
      });
    } catch (error) {
      console.error("Error generating AI insights:", error);
      toast({
        title: "Error generating insights",
        description: "Failed to analyze competitive data.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-5 w-5 text-purple-500" />
          AI Competitive Insights
        </CardTitle>
        <CardDescription>
          AI-powered analysis of your pricing against competitors
        </CardDescription>
      </CardHeader>
      <CardContent>
        {!insights ? (
          <div className="flex flex-col items-center justify-center py-8 space-y-4">
            <Target className="h-12 w-12 text-muted-foreground" />
            <div className="text-center space-y-2">
              <h3 className="font-medium">Generate Competitive Insights</h3>
              <p className="text-sm text-muted-foreground max-w-sm">
                AI will analyze your pricing data against market benchmarks to provide strategic recommendations.
              </p>
            </div>
            <Button 
              onClick={generateAiInsights}
              disabled={isLoading}
              className="mt-2"
            >
              {isLoading ? (
                <>
                  <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                  Analyzing...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate AI Insights
                </>
              )}
            </Button>
          </div>
        ) : (
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="pricing">Pricing</TabsTrigger>
              <TabsTrigger value="trends">Trends</TabsTrigger>
              <TabsTrigger value="strategy">Strategy</TabsTrigger>
            </TabsList>
            
            <TabsContent value="pricing" className="pt-4 space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Target className="h-5 w-5 text-blue-500" />
                  <h3 className="font-medium">Price Positioning</h3>
                </div>
                <Badge 
                  variant="outline" 
                  className={
                    insights.pricing.pricePositioning.status === 'competitive' 
                      ? "bg-green-50 text-green-700" 
                      : insights.pricing.pricePositioning.status === 'lower'
                        ? "bg-blue-50 text-blue-700"
                        : "bg-amber-50 text-amber-700"
                  }
                >
                  {insights.pricing.pricePositioning.status === 'competitive' 
                    ? "Competitive" 
                    : insights.pricing.pricePositioning.status === 'lower'
                      ? "Below Market"
                      : "Above Market"}
                </Badge>
              </div>
              
              <div className="text-sm">
                <p>Your overall pricing is <strong>{insights.pricing.pricePositioning.status}</strong> compared to market benchmarks ({insights.pricing.pricePositioning.confidence}% confidence).</p>
                <div className="mt-4">
                  <h4 className="font-medium mb-2">Recommendations:</h4>
                  <ul className="space-y-2">
                    {insights.pricing.recommendations.map((rec, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-green-500 mt-1">â€¢</span>
                        <span>{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div className="mt-4 p-3 border rounded-md bg-blue-50">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">Opportunity Score</h4>
                    <Badge variant="outline" className="bg-blue-100">
                      {insights.pricing.opportunityScore}/100
                    </Badge>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    This score represents the potential for pricing optimization based on competitive analysis.
                  </p>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="trends" className="pt-4 space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-purple-500" />
                  <h3 className="font-medium">Market Trends</h3>
                </div>
                <Badge 
                  variant="outline" 
                  className={
                    insights.trends.direction === 'up' 
                      ? "bg-green-50 text-green-700" 
                      : insights.trends.direction === 'down'
                        ? "bg-red-50 text-red-700"
                        : "bg-blue-50 text-blue-700"
                  }
                >
                  {insights.trends.direction === 'up' 
                    ? "Rising" 
                    : insights.trends.direction === 'down'
                      ? "Falling"
                      : "Stable"}
                </Badge>
              </div>
              
              <div className="text-sm">
                <p>Overall market prices are <strong>{insights.trends.direction === 'up' 
                  ? "rising" 
                  : insights.trends.direction === 'down'
                    ? "falling"
                    : "stable"}</strong> by {insights.trends.percentageChange}% in your product categories.</p>
                
                <div className="mt-4">
                  <h4 className="font-medium mb-2">Category Trends:</h4>
                  <div className="space-y-2">
                    {insights.trends.categories.map((category, index) => (
                      <div key={index} className="flex items-center justify-between p-2 border rounded">
                        <span>{category.name}</span>
                        <div className="flex items-center gap-1">
                          {category.trend === 'up' ? (
                            <TrendingUp className="h-3 w-3 text-green-500" />
                          ) : category.trend === 'down' ? (
                            <TrendingUp className="h-3 w-3 text-red-500 rotate-180" />
                          ) : (
                            <LineChart className="h-3 w-3 text-blue-500" />
                          )}
                          <span className={
                            category.trend === 'up' 
                              ? "text-green-600" 
                              : category.trend === 'down'
                                ? "text-red-600"
                                : "text-blue-600"
                          }>
                            {category.trend === 'stable' ? 'Stable' : `${category.percentage}%`}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="mt-4 p-3 border rounded-md bg-purple-50">
                  <div className="flex items-center gap-2 mb-2">
                    <BarChart className="h-4 w-4 text-purple-500" />
                    <h4 className="font-medium">Forecast</h4>
                  </div>
                  <p>
                    Prices are predicted to {insights.trends.forecast === 'increase' 
                      ? "increase" 
                      : insights.trends.forecast === 'decrease'
                        ? "decrease"
                        : "remain stable"} over the next quarter based on current market conditions.
                  </p>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="strategy" className="pt-4 space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <ShoppingBag className="h-5 w-5 text-green-500" />
                  <h3 className="font-medium">Pricing Strategy</h3>
                </div>
                <Badge 
                  variant="outline" 
                  className={
                    insights.strategy.pricingSensitivity === 'low' 
                      ? "bg-green-50 text-green-700" 
                      : insights.strategy.pricingSensitivity === 'medium'
                        ? "bg-amber-50 text-amber-700"
                        : "bg-red-50 text-red-700"
                  }
                >
                  {insights.strategy.pricingSensitivity === 'low' 
                    ? "Low Sensitivity" 
                    : insights.strategy.pricingSensitivity === 'medium'
                      ? "Medium Sensitivity"
                      : "High Sensitivity"}
                </Badge>
              </div>
              
              <div className="text-sm">
                <p>Your customers have <strong>{insights.strategy.pricingSensitivity}</strong> price sensitivity in the current market environment.</p>
                
                <div className="mt-4">
                  <h4 className="font-medium mb-2">Strategic Recommendations:</h4>
                  <ul className="space-y-2">
                    {insights.strategy.recommendations.map((rec, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-green-500 mt-1">â€¢</span>
                        <span>{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <Separator className="my-4" />
                
                <div>
                  <h4 className="font-medium mb-2">Competitive Advantages:</h4>
                  <ul className="space-y-2">
                    {insights.strategy.competitiveAdvantages.map((advantage, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-blue-500 mt-1">â€¢</span>
                        <span>{advantage}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        )}
      </CardContent>
      <CardFooter className="flex justify-between border-t pt-4">
        <div className="flex items-center gap-2 text-xs text-muted-foreground">
          <Sparkles className="h-3 w-3" />
          <span>AI-powered analysis based on market data</span>
        </div>
        
        {insights && (
          <Button 
            variant="outline" 
            size="sm" 
            onClick={generateAiInsights}
            disabled={isLoading}
          >
            {isLoading ? (
              <RefreshCw className="h-3 w-3 animate-spin" />
            ) : (
              <RefreshCw className="h-3 w-3" />
            )}
            <span className="ml-1">Refresh</span>
          </Button>
        )}
      </CardFooter>
    </Card>
  );
}
